//
// Created by LJW on 2023/06/26.
//
// 반복자(Iterator)
// 컨테이너의 원소를 가리키고, 가리키는 원소에 접근하여 다음 원소를 가리키게 하는 기능을 한다. 컨테이너에 저장된 원소를 순회하고 접근하는 일반화된 방법을 제공한다.
// 반복자는 컨테이너와 알고리즘이 하나로 동작하게 묶어주는 인터페이스 역할을 한다. 알고리즘은 특정 컨테이너에 종속적이지 않고, 독립적이면서도 언제든지 컨테이너와 결합하여 동작할 수 있다.
// 반복자는 컨테이너 내부의 원소(객체)를 가리키고 접근할 수 있어야 한다(* 연산자 제공).
// 반복자는 다음 원소로 이동하고 컨테이너의 모든 원소를 순회할 수 있어야 한다(++ 연산자, !=, == 비교연산자 제공).

// 모든 컨테이너는 자신만의 반복자를 제공한다. 멤버 함수 begin(), end()가 순차열의 시작과 끝을 가리키는 반복자를 반환한다.
// 컨테이너 원소(객체)의 집합을 순차열(sequence)라 한다. 순차열 개념은 원소의 순서 있는 집합을 의미한다.
// 순자열은 하나의 시작과 하나의 끝을 갖고, 여기서 반복자는 순차열의 한 원소를 가리킨다.
// 순차열의 시작과 끝에서 끝은 실제 원소가 아닌 끝을 표시(past-the-end)하는 원소이다. 이 begin 과 end를 구간(Range)이라 하며, 반개구간을 [begin, end)처럼 표기한다.
// 만약 순차열 [p, q)에서 p, q가 가리키는 원소가 같다면 이 순차열은 원소가 없다.
#include <iostream>
#include <vector>
using namespace std;

int main()
{
    vector<int> v;

    v.push_back(10);
    v.push_back(20);
    v.push_back(30);
    v.push_back(40);
    v.push_back(50);

    // 반복자 생성(아직 원소를 가리키지 않음)
    // 모든 컨테이너의 반복자 클래스는 내포 클래스나 typedef 타입이며, 자신만의 반복자를 가짐.
    vector<int>::iterator iter;

    for (iter = v.begin(); iter != v.end(); ++iter)
        // 반복자가 가리키는 원소를 역참조
        cout << *iter << endl;

    return 0;
}