// 함수 객체
// 함수처럼 동작하는 객체. '()' 연산자를 오버로딩한 객체이다.
// 함수 객체의 장점
// 1. 함수처럼 동작하는 객체이므로 다른 멤버 변수와 멤버 함수를 가질 수 있다.
// 2. 일반 함수에서 하지 못하는 지원을 받을 수 있다.
// 3. 함수 객체의 서명이 같더라도 객체 타입이 다르면 서로 전혀 다른 타입으로 인식한다.
// 4. 일반 함수보다 함수 객체가 빠르다.
// 5. 함수 주소를 전달하여 콜백하는 경우 함수 포인터는 인라인 될 수 없지만(함수 포인터는 함수가 있어야 하므로 인라인 함수의 복사본 함수를 만들어 냄) 함수 객체는 인라인될 수 있고, 컴파일러가 쉽게 최적화할 수 있다.

#include <iostream>
using namespace std;

class Adder
{
    int total;
public:
    explicit Adder(int n = 0)
        : total(n)
    {

    }

    // 함수 객체가 호출될 때마다 정수를 누적하고 반환한다.
    // 클래스 내부에 정의되므로 암묵적으로 인라인 함수가 됨.
    // 타입이 다른 함수 객체는 Adder 클래스 객체에 대입하거나 복사할 수 없음.
    int operator()(int n)
    {
        return total += n;
    }
};

int main()
{
    // 초깃값 0
    Adder add(0);

    // 10 누적 -> 10
    cout << add(10) << endl;
    // 20 누적 -> 30
    cout << add(20) << endl;
    // 30 누적 -> 60
    cout << add(30) << endl;

    return 0;
}
